name: SonarQube Analysis

on:
  workflow_call:
    inputs:
      language:
        required: true
        type: string
      enable_tests:
        required: false
        type: boolean
        default: true
    secrets:
      SONAR_HOST_URL:
        required: true
      SONAR_TOKEN:
        required: true

jobs:
  sonarqube:
    name: Analyze with SonarQube
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Environment
        if: inputs.language == 'typescript'
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup .NET
        if: inputs.language == 'dotnet'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install SonarScanner
        run: |
          if [ "${{ inputs.language }}" == "typescript" ]; then
            npm install -g sonar-scanner
          elif [ "${{ inputs.language }}" == "dotnet" ]; then
            dotnet tool install --global dotnet-sonarscanner
          fi

      # ConfiguraciÃ³n especial para proyectos grandes
      - name: Create Temporary Solution (For Large .NET Projects)
        if: inputs.language == 'dotnet' && inputs.enable_tests == false
        run: |
          echo "Creating temporary solution excluding test projects..."
          dotnet new sln -n TempSolution -o ./ --force
          dotnet sln ./TempSolution.sln add $(find ./src -name '*.csproj' | grep -vE '/test/|/tests/|.*Test.*.csproj')

      # Coverage para TypeScript
      - name: Run Tests with Coverage (TypeScript)
        if: inputs.language == 'typescript' && inputs.enable_tests == true
        run: yarn test --no-cache --ci --coverage

      - name: Fix lcov paths
        if: inputs.language == 'typescript' && inputs.enable_tests == true
        run: sed -i 's#\.\./##g' coverage/lcov.info

      # Coverage para .NET
      - name: Run Tests with Coverage (.NET)
        if: inputs.language == 'dotnet' && inputs.enable_tests == true
        run: |
          dotnet test --collect:"XPlat Code Coverage" --logger trx --results-directory ./TestResults/
          coverlet ./TestResults/Coverage/coverage.opencover.xml --target "dotnet" --targetargs "test --no-build --logger trx --results-directory ./TestResults/"

      - name: Set Coverage Path
        if: inputs.enable_tests == true
        run: |
          if [ "${{ inputs.language }}" == "typescript" ]; then
            echo "COVERAGE_PATH=coverage/lcov.info" >> $GITHUB_ENV
          elif [ "${{ inputs.language }}" == "dotnet" ]; then
            echo "COVERAGE_PATH=TestResults/Coverage/coverage.opencover.xml" >> $GITHUB_ENV
          fi

      - name: Run SonarQube Analysis
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          ENABLE_TESTS: "${{ inputs.enable_tests }}"
        run: |
          SONAR_CMD="dotnet sonarscanner begin \
            /k:'${{ github.event.repository.name }}' \
            /d:sonar.host.url='${{ secrets.SONAR_HOST_URL }}' \
            /d:sonar.login='${{ secrets.SONAR_TOKEN }}'"
      
          if [ "${{ inputs.language }}" == "typescript" ]; then
            SONAR_CMD="sonar-scanner \
              -Dsonar.projectKey='${{ github.event.repository.name }}' \
              -Dsonar.sources=src \
              -Dsonar.host.url='${{ secrets.SONAR_HOST_URL }}' \
              -Dsonar.login='${{ secrets.SONAR_TOKEN }}'"
      
            if [ "$ENABLE_TESTS" == "true" ]; then
              SONAR_CMD="$SONAR_CMD -Dsonar.javascript.lcov.reportPaths='${{ env.COVERAGE_PATH }}'"
            fi
          fi
      
          if [ "${{ inputs.language }}" == "dotnet" ]; then
            if [ "$ENABLE_TESTS" == "true" ]; then
              SONAR_CMD="$SONAR_CMD /d:sonar.cs.opencover.reportsPaths='${{ env.COVERAGE_PATH }}'"
            fi
      
            SONAR_CMD="$SONAR_CMD"
            dotnet build
            if [ "$ENABLE_TESTS" == "true" ]; then
              dotnet test --no-build --collect:"XPlat Code Coverage"
            else
              dotnet build ./TempSolution.sln
            fi
      
            SONAR_CMD="$SONAR_CMD && dotnet sonarscanner end /d:sonar.login='${{ secrets.SONAR_TOKEN }}'"
          fi
      
          eval $SONAR_CMD

